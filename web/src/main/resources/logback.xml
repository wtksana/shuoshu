<?xml version="1.0" encoding="UTF-8" ?>
<!-- scan:
当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:
设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:
当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration>

    <!-- RollingFileAppender  滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件-->
    <appender name="ROLL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名 -->
            <fileNamePattern>shuoShuLog.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 每天生成一个日志文件，保存30天的日志文件 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <!-- FixedWindowRollingPolicy 根据固定窗口算法重命名文件的滚动策略
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            &lt;!&ndash; 必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log
            。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip &ndash;&gt;
            <fileNamePattern>shuoShuLog.%i.log</fileNamePattern>
            &lt;!&ndash; 窗口索引最小值 &ndash;&gt;
            <minIndex>1</minIndex>
            &lt;!&ndash; 窗口索引最大值, 当用户指定的窗口过大时，会自动将窗口设置为12&ndash;&gt;
            <maxIndex>3</maxIndex>

        </rollingPolicy>
        &lt;!&ndash; 当文件大于5MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志 &ndash;&gt;
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <maxFileSize>5MB</maxFileSize>
        </triggeringPolicy>

        &lt;!&ndash; 当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。 &ndash;&gt;
        <prudent>false</prudent>-->
        <!-- encoder 将日志输出内容进行格式化 -->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %-4relative %-5level %logger - %msg%n</pattern>
        </encoder>

        <!-- 级别过滤器，下面的配置只接受INFO级别的日志 -->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>-->
    </appender>

    <!-- ConsoleAppender 输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %-4relative %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- FileAppender 把日志添加到文件-->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>testFile.log</file>
        <!-- true的话，追加到文件结尾，false的话，清空现存文件，重写写入，默认为true -->
        <append>true</append>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %-4relative %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>


    <root level="DEBUG">
        <appender-ref ref="ROLL" />
        <appender-ref ref="FILE" />
        <appender-ref ref="STDOUT" />
    </root>
</configuration>